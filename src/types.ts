export enum EntryUpdateTagActions {
    IGNORE = "ignore",
    REPLACE = "replace",
    MERGE = "merge"
}

export enum Role {
    OWNER = "owner",
    MEMBER = "member"
}

export type BugoutPing = {
    status: string
}

export type BugoutUser = {
    id: string
    username: string
    first_name?: string
    last_name?: string
    email?: string
    normalized_email?: string
    verified?: string
    autogenerated?: string
    application_id?: string
    created_at?: string
    updated_at?: string
}

export function userUnpacker(response): BugoutUser {
    return {
        id: response.user_id,
        username: response.username,
        first_name: response.first_name,
        last_name: response.last_name,
        email: response.email,
        normalized_email: response.normalized_email,
        verified: response.verified,
        created_at: response.created_at,
        updated_at: response.updated_at
    } as BugoutUser
}

export type BugoutToken = {
    id: string
    user_id: string
    active: boolean
    token_type?: string
    note?: string
    restricted?: boolean
    created_at: string
    updated_at: string
}

export function tokenUnpacker(response): BugoutToken {
    return {
        id: response.id,
        user_id: response.user_id,
        active: response.active,
        token_type: response.token_type,
        note: response.note,
        restricted: response.restricted,
        created_at: response.created_at,
        updated_at: response.updated_at
    } as BugoutToken
}

export type BugoutUserTokens = {
    user_id: string
    username: string
    tokens: BugoutToken[]
}

export function userTokensUnpacker(response): BugoutUserTokens {
    return {
        user_id: response.user_id,
        username: response.username,
        tokens: response.token.map((token: BugoutToken) => {
            return tokenUnpacker(token)
        })
    } as BugoutUserTokens
}

export type BugoutPasswordRestore = {
    reset_password: string
}

export type BugoutGroup = {
    id: string
    group_name?: string
    autogenerated: boolean
}

export function groupUnpacker(response): BugoutGroup {
    return {
        id: response.id,
        group_name: response.name,
        autogenerated: response.autogenerated
    } as BugoutGroup
}

export type BugoutGroupUser = {
    group_id: string
    user_id: string
    user_type: Role
    autogenerated: boolean
    group_name: string
    parent?: string
}

export function groupUserUnpacker(response): BugoutGroupUser {
    return {
        group_id: response.group_id,
        user_id: response.user_id,
        user_type: response.user_type,
        autogenerated: response.autogenerated,
        group_name: response.group_name,
        parent: response.parent
    } as BugoutGroupUser
}

export type BugoutApplication = {
    id: string
    name: string
    description: string
    group_id: string
}

export function applicationUnpacker(response): BugoutApplication {
    return {
        id: response.id,
        name: response.name,
        description: response.description,
        group_id: response.group_id
    } as BugoutApplication
}

export type BugoutApplications = {
    applications: BugoutApplication[]
}

export function applicationsUnpacker(response): BugoutApplications {
    return {
        applications: response.applications.map((application: BugoutApplication) => {
            return applicationUnpacker(application)
        })
    } as BugoutApplications
}

export type BugoutResource = {
    id: string
    application_id: string
    resource_data: any
    created_at: string
    updated_at: string
}

export function resourceUnpacker(response): BugoutResource {
    return {
        id: response.id,
        application_id: response.application_id,
        resource_data: response.resource_data,
        created_at: response.created_at,
        updated_at: response.updated_at
    } as BugoutResource
}

export type BugoutResources = {
    resources: BugoutResource[]
}

export function resourcesUnpacker(response): BugoutResources {
    return {
        resources: response.resources.map((resource: BugoutResource) => {
            return resourceUnpacker(resource)
        })
    } as BugoutResources
}

export type BugoutResourceHolder = {
    id: string
    holder_type: string
    permissions: string[]
}

export function resourceHolderUnpacker(response): BugoutResourceHolder {
    return {
        id: response.id,
        holder_type: response.holder_type,
        permissions: response.permissions
    } as BugoutResourceHolder
}

export type BugoutResourceHolders = {
    resource_id: string
    holders: BugoutResourceHolder[]
}

export function resourceHoldersUnpacker(response): BugoutResourceHolders {
    return {
        resource_id: response.resource_id,
        holders: response.holders.map((holder: BugoutResourceHolder) => {
            return resourceHolderUnpacker(holder)
        })
    } as BugoutResourceHolders
}

export type BugoutJournal = {
    id: string
    bugout_user_id: string
    holder_ids: string[]
    name: string
    created_at: string
    updated_at: string
}

export function journalUnpacker(response): BugoutJournal {
    return {
        id: response.id,
        bugout_user_id: response.bugout_user_id,
        holder_ids: response.holder_ids,
        name: response.name,
        created_at: response.created_at,
        updated_at: response.updated_at
    } as BugoutJournal
}

export type BugoutJournals = {
    journals: BugoutJournal[]
}

export function journalsUnpacker(response): BugoutJournals {
    return {
        journals: response.journals.map((journal: BugoutJournal) => {
            return journalUnpacker(journal)
        })
    } as BugoutJournals
}

export type BugoutJournalEntry = {
    id: string
    journal_url?: string
    content_url?: string
    title?: string
    content?: string
    tags: string[]
    created_at?: string
    updated_at?: string
    context_url?: string
    context_type?: string
}

export function journalEntryUnpacker(response): BugoutJournalEntry {
    return {
        id: response.id,
        journal_url: response.journal_url,
        content_url: response.content_url,
        title: response.title,
        content: response.content,
        tags: response.tags,
        created_at: response.created_at,
        updated_at: response.updated_at,
        context_url: response.context_url,
        context_type: response.context_type
    } as BugoutJournalEntry
}

export type BugoutJournalEntries = {
    entries: BugoutJournalEntry[]
}

export function journalEntriesUnpacker(response): BugoutJournalEntries {
    return {
        entries: response.entries.map((entry: BugoutJournalEntry) => {
            return journalEntryUnpacker(entry)
        })
    } as BugoutJournalEntries
}

export type BugoutJournalEntryContent = {
    title: string
    content: string
}

export type BugoutSearchResult = {
    entry_url: string
    content_url: string
    title: string
    content?: string
    tags: string[]
    created_at: string
    updated_at: string
    score: number
}

export function searchResultUnpacker(response): BugoutSearchResult {
    return {
        entry_url: response.entry_url,
        content_url: response.content_url,
        title: response.title,
        content: response.content,
        tags: response.tags,
        created_at: response.created_at,
        updated_at: response.updated_at,
        score: response.score
    } as BugoutSearchResult
}

export type BugoutSearchResults = {
    total_results: number
    offset: number
    next_offset?: number
    max_score: number
    results: BugoutSearchResult[]
}

export function searchResultsUnpacker(response): BugoutSearchResults {
    return {
        total_results: response.total_results,
        offset: response.offset,
        next_offset: response.next_offset,
        max_score: response.max_score,
        results: response.results.map((result: BugoutSearchResult) => {
            return searchResultUnpacker(result)
        })
    } as BugoutSearchResults
}

export type BugoutEntryImage = {
    id: string
    journal_id: string
    entry_id: string
    name: string
    extension: string
    created_at: string
}

export function entryImageUnpacker(response) {
    return {
        id: response.id,
        journal_id: response.journal_id,
        entry_id: response.entry_id,
        name: response.name,
        extension: response.extension,
        created_at: response.created_at
    } as BugoutEntryImage
}

export type BugoutEntryImages = {
    images: BugoutEntryImage[]
}

export function entryImagesUnpacker(response): BugoutEntryImages {
    return {
        images: response.images.map((image: BugoutEntryImage) => {
            return entryImageUnpacker(image)
        })
    } as BugoutEntryImages
}
